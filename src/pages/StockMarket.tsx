
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Navbar } from "@/components/layout/Navbar";
import { Sidebar } from "@/components/layout/Sidebar";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { 
  BarChart3, 
  TrendingUp, 
  TrendingDown, 
  DollarSign, 
  ShoppingBag, 
  MessageSquare, 
  PieChart 
} from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useSupabaseAuth } from "@/hooks/auth/useSupabaseAuth";

export default function StockMarket() {
  const [stockExchangeItems, setStockExchangeItems] = useState<any[]>([]);
  const [sharesTransactions, setSharesTransactions] = useState<any[]>([]);
  const [shareholders, setShareholders] = useState<any[]>([]);
  const [stockPrice, setStockPrice] = useState(0);
  const [selectedOffer, setSelectedOffer] = useState<any>(null);
  const [buyAmount, setBuyAmount] = useState("1");
  const [openBuyDialog, setOpenBuyDialog] = useState(false);
  const [openDetailsDialog, setOpenDetailsDialog] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<any>(null);
  const [newMessage, setNewMessage] = useState("");
  const [sharesCount, setSharesCount] = useState("1");
  const [sharePrice, setSharePrice] = useState("");
  const [openSellDialog, setOpenSellDialog] = useState(false);
  
  const navigate = useNavigate();
  const { getCurrentUser, isAuthenticated, loading } = useSupabaseAuth();
  const currentUser = getCurrentUser();
  
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Supabase
    console.log('üìà Stock Market: checking auth...', { 
      loading, 
      isAuthenticated: isAuthenticated(), 
      currentUser: currentUser ? {
        id: currentUser.id,
        isShareHolder: currentUser.isShareHolder
      } : null
    });
    
    if (loading) return;
    
    if (!isAuthenticated() || !currentUser) {
      console.log('‚ùå Stock Market access denied: no auth');
      toast.error("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: –ù–µ–æ–±—Ö—ñ–¥–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É");
      navigate("/auth");
      return;
    }
    
    if (!currentUser.isShareHolder) {
      console.log('‚ùå Stock Market access denied: no shareholder status', {
        isShareHolder: currentUser.isShareHolder
      });
      toast.error("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: –ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ü—ñ–æ–Ω–µ—Ä–∞");
      navigate("/");
      return;
    }
    
    console.log('‚úÖ Stock Market access granted');
    
    const storedPrice = localStorage.getItem("stockPrice");
    setStockPrice(storedPrice ? parseFloat(storedPrice) : 1000);
    
    const storedExchange = localStorage.getItem("stockExchange");
    if (storedExchange) {
      setStockExchangeItems(JSON.parse(storedExchange));
    }
    
    const storedTransactions = localStorage.getItem("sharesTransactions");
    if (storedTransactions) {
      setSharesTransactions(JSON.parse(storedTransactions));
    }
    
    const storedUsers = localStorage.getItem("users");
    if (storedUsers) {
      const users = JSON.parse(storedUsers);
      const shareholdersData = users.filter((u: any) => u.isShareHolder);
      setShareholders(shareholdersData);
    }
    
    setSharePrice(storedPrice || "1000");
  }, [navigate, loading, isAuthenticated, currentUser]);
  
  const handleBuyOffer = (offer: any) => {
    if (offer.sellerId === currentUser.id) {
      toast.error("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –≤–ª–∞—Å–Ω—ñ –∞–∫—Ü—ñ—ó");
      return;
    }
    
    setSelectedOffer(offer);
    setBuyAmount("1");
    setOpenBuyDialog(true);
  };
  
  const confirmBuy = () => {
    if (!selectedOffer) return;
    
    const amount = parseInt(buyAmount);
    if (isNaN(amount) || amount <= 0 || amount > selectedOffer.sharesCount) {
      toast.error(`–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π (1-${selectedOffer.sharesCount})`);
      return;
    }
    
    const totalPrice = amount * selectedOffer.pricePerShare;
    
    const newTransaction = {
      id: Date.now().toString(),
      listingId: selectedOffer.id,
      sellerId: selectedOffer.sellerId,
      sellerName: selectedOffer.sellerName,
      buyerId: currentUser.id,
      buyerName: `${currentUser.firstName} ${currentUser.lastName}`,
      sharesCount: amount,
      pricePerShare: selectedOffer.pricePerShare,
      totalAmount: totalPrice,
      status: "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
      date: new Date().toISOString(),
      messages: [],
      sellerConfirmed: false,
      buyerConfirmed: true,
      adminApproved: false
    };
    
    const updatedTransactions = [...sharesTransactions, newTransaction];
    setSharesTransactions(updatedTransactions);
    localStorage.setItem("sharesTransactions", JSON.stringify(updatedTransactions));
    
    const updatedStockExchangeItems = stockExchangeItems.map(item => {
      if (item.id === selectedOffer.id) {
        return { ...item, status: "–í –ø—Ä–æ—Ü–µ—Å—ñ –ø—Ä–æ–¥–∞–∂—É" };
      }
      return item;
    });
    
    setStockExchangeItems(updatedStockExchangeItems);
    localStorage.setItem("stockExchange", JSON.stringify(updatedStockExchangeItems));
    
    setOpenBuyDialog(false);
    toast.success("–ó–∞–ø–∏—Ç –Ω–∞ –∫—É–ø—ñ–≤–ª—é –∞–∫—Ü—ñ–π –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ");
  };
  
  const openTransactionDetails = (transaction: any) => {
    setSelectedTransaction(transaction);
    setOpenDetailsDialog(true);
  };
  
  const sendMessage = () => {
    if (!newMessage.trim() || !selectedTransaction) return;
    
    const message = {
      id: Date.now().toString(),
      sender: `${currentUser.firstName} ${currentUser.lastName}`,
      senderId: currentUser.id,
      text: newMessage,
      date: new Date().toISOString()
    };
    
    const updatedTransaction = {
      ...selectedTransaction,
      messages: selectedTransaction.messages ? [...selectedTransaction.messages, message] : [message]
    };
    
    const updatedTransactions = sharesTransactions.map(t => 
      t.id === selectedTransaction.id ? updatedTransaction : t
    );
    
    setSharesTransactions(updatedTransactions);
    localStorage.setItem("sharesTransactions", JSON.stringify(updatedTransactions));
    
    setSelectedTransaction(updatedTransaction);
    setNewMessage("");
    toast.success("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ");
  };
  
  const confirmTransaction = () => {
    if (!selectedTransaction) return;
    
    const updatedTransaction = {
      ...selectedTransaction,
      sellerConfirmed: selectedTransaction.sellerId === currentUser.id,
      buyerConfirmed: selectedTransaction.buyerId === currentUser.id,
      status: "–û—á—ñ–∫—É—î —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    };
    
    const updatedTransactions = sharesTransactions.map(t => 
      t.id === selectedTransaction.id ? updatedTransaction : t
    );
    
    setSharesTransactions(updatedTransactions);
    localStorage.setItem("sharesTransactions", JSON.stringify(updatedTransactions));
    
    setSelectedTransaction(updatedTransaction);
    toast.success("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ");
  };
  
  const cancelTransaction = () => {
    if (!selectedTransaction) return;
    
    const updatedTransactions = sharesTransactions.map(t => {
      if (t.id === selectedTransaction.id) {
        return { ...t, status: "–°–∫–∞—Å–æ–≤–∞–Ω–æ" };
      }
      return t;
    });
    
    setSharesTransactions(updatedTransactions);
    localStorage.setItem("sharesTransactions", JSON.stringify(updatedTransactions));
    
    const updatedStockExchangeItems = stockExchangeItems.map(item => {
      if (item.id === selectedTransaction.listingId) {
        return { ...item, status: "–ê–∫—Ç–∏–≤–Ω–∞" };
      }
      return item;
    });
    
    setStockExchangeItems(updatedStockExchangeItems);
    localStorage.setItem("stockExchange", JSON.stringify(updatedStockExchangeItems));
    
    setOpenDetailsDialog(false);
    toast.success("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ");
  };
  
  const openSellSharesDialog = () => {
    setSharesCount("1");
    setSharePrice(stockPrice.toString());
    setOpenSellDialog(true);
  };
  
  const sellShares = () => {
    const amount = parseInt(sharesCount);
    if (isNaN(amount) || amount <= 0) {
      toast.error("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π");
      return;
    }
    
    if (!currentUser.shares || amount > currentUser.shares) {
      toast.error(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞–∫—Ü—ñ–π. –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentUser.shares || 0}`);
      return;
    }
    
    const price = parseFloat(sharePrice);
    if (isNaN(price) || price <= 0) {
      toast.error("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É –∞–∫—Ü—ñ—ó");
      return;
    }
    
    const newListing = {
      id: Date.now().toString(),
      sellerId: currentUser.id,
      sellerName: `${currentUser.firstName} ${currentUser.lastName}`,
      sharesCount: amount,
      pricePerShare: price,
      initialPrice: price,
      status: "–ê–∫—Ç–∏–≤–Ω–∞",
      date: new Date().toISOString(),
      isAuction: false
    };
    
    const updatedStockExchangeItems = [...stockExchangeItems, newListing];
    setStockExchangeItems(updatedStockExchangeItems);
    localStorage.setItem("stockExchange", JSON.stringify(updatedStockExchangeItems));
    
    setOpenSellDialog(false);
    toast.success("–ê–∫—Ü—ñ—ó –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–¥–∞–∂");
  };
  
  if (loading) {
    return <div className="container py-16 text-center">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>;
  }

  // Show loading while user data is being fetched
  if (isAuthenticated() && !currentUser) {
    return <div className="container py-16 text-center">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...</div>;
  }

  if (!isAuthenticated() || !currentUser) {
    return <div className="container py-16 text-center">–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...</div>;
  }

  if (!currentUser.isShareHolder) {
    return <div className="container py-16 text-center">–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ: –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å—Ç–∞—Ç—É—Å –∞–∫—Ü—ñ–æ–Ω–µ—Ä–∞</div>;
  }

  const myOffers = stockExchangeItems.filter(item => item.sellerId === currentUser.id);
  const myTransactions = sharesTransactions.filter(t => 
    t.sellerId === currentUser.id || t.buyerId === currentUser.id
  );
  const activeListings = stockExchangeItems.filter(item => 
    item.status === "–ê–∫—Ç–∏–≤–Ω–∞" && item.sellerId !== currentUser.id
  );

  return (
    <div className="min-h-screen bg-background">
      <Navbar />
      <div className="container grid grid-cols-12 gap-6 px-4 md:px-6 py-6">
        <Sidebar className="hidden lg:block col-span-3" />
        
        <main className="col-span-12 lg:col-span-9">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-3xl font-bold">–†–∏–Ω–æ–∫ –∞–∫—Ü—ñ–π</h1>
              <p className="text-muted-foreground">–ö–µ—Ä—É–π—Ç–µ —Å–≤–æ—ó–º–∏ –∞–∫—Ü—ñ—è–º–∏ —Ç–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—è–º–∏</p>
            </div>
            <Button onClick={openSellSharesDialog}>
              <TrendingUp className="h-4 w-4 mr-2" /> –ü—Ä–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—ó
            </Button>
          </div>
          
          <div className="grid gap-6 grid-cols-1 md:grid-cols-3 mb-6">
            <Card>
              <CardContent className="p-6 flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">–í–∞—à—ñ –∞–∫—Ü—ñ—ó</p>
                  <h3 className="text-2xl font-bold mt-1">{currentUser.shares || 0}</h3>
                </div>
                <div className="p-3 rounded-full bg-blue-100 text-blue-700">
                  <PieChart className="h-6 w-6" />
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6 flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">–¶—ñ–Ω–∞ –∞–∫—Ü—ñ—ó</p>
                  <h3 className="text-2xl font-bold mt-1">{stockPrice.toFixed(2)} –≥—Ä–Ω</h3>
                </div>
                <div className="p-3 rounded-full bg-green-100 text-green-700">
                  <DollarSign className="h-6 w-6" />
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardContent className="p-6 flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-muted-foreground">–í–∞—à –ø—Ä–∏–±—É—Ç–æ–∫</p>
                  <h3 className="text-2xl font-bold mt-1">{currentUser.profit?.toFixed(2) || "0.00"} –≥—Ä–Ω</h3>
                </div>
                <div className="p-3 rounded-full bg-amber-100 text-amber-700">
                  <BarChart3 className="h-6 w-6" />
                </div>
              </CardContent>
            </Card>
          </div>
          
          <Tabs defaultValue="market" className="w-full space-y-4">
            <TabsList>
              <TabsTrigger value="market">–†–∏–Ω–æ–∫ –∞–∫—Ü—ñ–π</TabsTrigger>
              <TabsTrigger value="my-offers">–ú–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó</TabsTrigger>
              <TabsTrigger value="transactions">–ú–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó</TabsTrigger>
              <TabsTrigger value="shareholders">–ê–∫—Ü—ñ–æ–Ω–µ—Ä–∏</TabsTrigger>
            </TabsList>
            
            <TabsContent value="market">
              <Card>
                <CardHeader>
                  <CardTitle>–î–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∞–∫—Ü—ñ–π</CardTitle>
                  <CardDescription>
                    –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ç–∞ –ø—Ä–∏–¥–±–∞–π—Ç–µ –∞–∫—Ü—ñ—ó —É —ñ–Ω—à–∏—Ö –∞–∫—Ü—ñ–æ–Ω–µ—Ä—ñ–≤
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {activeListings.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b">
                            <th className="text-left p-2">–ü—Ä–æ–¥–∞–≤–µ—Ü—å</th>
                            <th className="text-left p-2">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π</th>
                            <th className="text-left p-2">–¶—ñ–Ω–∞ –∑–∞ –∞–∫—Ü—ñ—é</th>
                            <th className="text-left p-2">–°—É–º–∞</th>
                            <th className="text-left p-2">–î–∏–Ω–∞–º—ñ–∫–∞ —Ü—ñ–Ω–∏</th>
                            <th className="text-left p-2"></th>
                          </tr>
                        </thead>
                        <tbody>
                          {activeListings.map((item) => (
                            <tr key={item.id} className="border-b hover:bg-muted/50">
                              <td className="p-2">{item.sellerName}</td>
                              <td className="p-2">{item.sharesCount}</td>
                              <td className="p-2">{item.pricePerShare.toFixed(2)} –≥—Ä–Ω</td>
                              <td className="p-2">{(item.sharesCount * item.pricePerShare).toFixed(2)} –≥—Ä–Ω</td>
                              <td className="p-2">
                                {item.pricePerShare > stockPrice ? (
                                  <span className="flex items-center text-red-500">
                                    <TrendingUp className="h-4 w-4 mr-1" /> 
                                    {(((item.pricePerShare - stockPrice) / stockPrice) * 100).toFixed(1)}%
                                  </span>
                                ) : item.pricePerShare < stockPrice ? (
                                  <span className="flex items-center text-green-500">
                                    <TrendingDown className="h-4 w-4 mr-1" /> 
                                    {(((stockPrice - item.pricePerShare) / stockPrice) * 100).toFixed(1)}%
                                  </span>
                                ) : (
                                  <span className="text-muted-foreground">0%</span>
                                )}
                              </td>
                              <td className="p-2">
                                <Button 
                                  size="sm" 
                                  onClick={() => handleBuyOffer(item)}
                                >
                                  <ShoppingBag className="h-4 w-4 mr-1" /> –ö—É–ø–∏—Ç–∏
                                </Button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <ShoppingBag className="h-8 w-8 mx-auto text-muted-foreground mb-3" />
                      <h3 className="text-lg font-medium mb-2">–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π</h3>
                      <p className="text-muted-foreground">
                        –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ü—ñ–π, –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∂ —ñ–Ω—à–∏–º–∏ –∞–∫—Ü—ñ–æ–Ω–µ—Ä–∞–º–∏
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="my-offers">
              <Card>
                <CardHeader>
                  <CardTitle>–ú–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–¥–∞–∂</CardTitle>
                  <CardDescription>
                    –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–≤–æ—ó—Ö –∞–∫—Ü—ñ–π, –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö –Ω–∞ –ø—Ä–æ–¥–∞–∂
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {myOffers.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b">
                            <th className="text-left p-2">–î–∞—Ç–∞</th>
                            <th className="text-left p-2">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π</th>
                            <th className="text-left p-2">–¶—ñ–Ω–∞ –∑–∞ –∞–∫—Ü—ñ—é</th>
                            <th className="text-left p-2">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞</th>
                            <th className="text-left p-2">–°—Ç–∞—Ç—É—Å</th>
                          </tr>
                        </thead>
                        <tbody>
                          {myOffers.map((item) => (
                            <tr key={item.id} className="border-b hover:bg-muted/50">
                              <td className="p-2">{new Date(item.date).toLocaleDateString()}</td>
                              <td className="p-2">{item.sharesCount}</td>
                              <td className="p-2">{item.pricePerShare.toFixed(2)} –≥—Ä–Ω</td>
                              <td className="p-2">{(item.sharesCount * item.pricePerShare).toFixed(2)} –≥—Ä–Ω</td>
                              <td className="p-2">
                                <Badge variant={
                                  item.status === "–ê–∫—Ç–∏–≤–Ω–∞" ? "secondary" : 
                                  item.status === "–í –ø—Ä–æ—Ü–µ—Å—ñ –ø—Ä–æ–¥–∞–∂—É" ? "outline" : "default"
                                }>
                                  {item.status}
                                </Badge>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <DollarSign className="h-8 w-8 mx-auto text-muted-foreground mb-3" />
                      <h3 className="text-lg font-medium mb-2">–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π</h3>
                      <p className="text-muted-foreground mb-3">
                        –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤–æ—ó –∞–∫—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–¥–∞–∂, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—ó"
                      </p>
                      <Button onClick={openSellSharesDialog}>
                        <TrendingUp className="h-4 w-4 mr-2" /> –ü—Ä–æ–¥–∞—Ç–∏ –∞–∫—Ü—ñ—ó
                      </Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="transactions">
              <Card>
                <CardHeader>
                  <CardTitle>–ú–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó</CardTitle>
                  <CardDescription>
                    –Ü—Å—Ç–æ—Ä—ñ—è —Ç–∞ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫—É–ø—ñ–≤–ª—ñ-–ø—Ä–æ–¥–∞–∂—É –∞–∫—Ü—ñ–π
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {myTransactions.length > 0 ? (
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead>
                          <tr className="border-b">
                            <th className="text-left p-2">–î–∞—Ç–∞</th>
                            <th className="text-left p-2">–¢–∏–ø</th>
                            <th className="text-left p-2">–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç</th>
                            <th className="text-left p-2">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π</th>
                            <th className="text-left p-2">–°—É–º–∞</th>
                            <th className="text-left p-2">–°—Ç–∞—Ç—É—Å</th>
                            <th className="text-left p-2"></th>
                          </tr>
                        </thead>
                        <tbody>
                          {myTransactions.map((transaction) => (
                            <tr key={transaction.id} className="border-b hover:bg-muted/50">
                              <td className="p-2">{new Date(transaction.date).toLocaleDateString()}</td>
                              <td className="p-2">
                                {transaction.sellerId === currentUser.id ? "–ü—Ä–æ–¥–∞–∂" : "–ö—É–ø—ñ–≤–ª—è"}
                              </td>
                              <td className="p-2">
                                {transaction.sellerId === currentUser.id 
                                  ? transaction.buyerName 
                                  : transaction.sellerName}
                              </td>
                              <td className="p-2">{transaction.sharesCount}</td>
                              <td className="p-2">{transaction.totalAmount.toFixed(2)} –≥—Ä–Ω</td>
                              <td className="p-2">
                                <Badge variant={
                                  transaction.status === "–ó–∞–≤–µ—Ä—à–µ–Ω–æ" ? "secondary" : 
                                  transaction.status === "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ" || transaction.status === "–°–∫–∞—Å–æ–≤–∞–Ω–æ" 
                                    ? "destructive" : "outline"
                                }>
                                  {transaction.status}
                                </Badge>
                              </td>
                              <td className="p-2">
                                <Button 
                                  size="sm" 
                                  variant="outline"
                                  onClick={() => openTransactionDetails(transaction)}
                                >
                                  –î–µ—Ç–∞–ª—ñ
                                </Button>
                              </td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <DollarSign className="h-8 w-8 mx-auto text-muted-foreground mb-3" />
                      <h3 className="text-lg font-medium mb-2">–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π</h3>
                      <p className="text-muted-foreground">
                        –Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑'—è–≤–∏—Ç—å—Å—è —Ç—É—Ç –ø—ñ—Å–ª—è –∫—É–ø—ñ–≤–ª—ñ –∞–±–æ –ø—Ä–æ–¥–∞–∂—É –∞–∫—Ü—ñ–π
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="shareholders">
              <Card>
                <CardHeader>
                  <CardTitle>–°–ø–∏—Å–æ–∫ –∞–∫—Ü—ñ–æ–Ω–µ—Ä—ñ–≤</CardTitle>
                  <CardDescription>
                    –ü–µ—Ä–µ–≥–ª—è–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—Å—ñ—Ö –∞–∫—Ü—ñ–æ–Ω–µ—Ä—ñ–≤ –∫–æ–º–ø–∞–Ω—ñ—ó
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead>
                        <tr className="border-b">
                          <th className="text-left p-2">–ê–∫—Ü—ñ–æ–Ω–µ—Ä</th>
                          <th className="text-left p-2">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π</th>
                          <th className="text-left p-2">–ß–∞—Å—Ç–∫–∞</th>
                          <th className="text-left p-2">–¢–∏—Ç—É–ª</th>
                        </tr>
                      </thead>
                      <tbody>
                        {shareholders.map((shareholder) => (
                          <tr key={shareholder.id} className="border-b hover:bg-muted/50">
                            <td className="p-2">
                              <div className="flex items-center gap-2">
                                <Avatar className="h-8 w-8">
                                  <AvatarImage src={shareholder.avatarUrl} alt={`${shareholder.firstName} ${shareholder.lastName}`} />
                                  <AvatarFallback>{shareholder.firstName?.[0]}{shareholder.lastName?.[0]}</AvatarFallback>
                                </Avatar>
                                <div>
                                  {shareholder.firstName} {shareholder.lastName}
                                  {shareholder.id === currentUser.id && (
                                    <span className="text-xs text-muted-foreground ml-1">(–í–∏)</span>
                                  )}
                                </div>
                              </div>
                            </td>
                            <td className="p-2">{shareholder.shares || 0}</td>
                            <td className="p-2">{shareholder.percentage || 0}%</td>
                            <td className="p-2">{shareholder.title || "–ú–∞–≥–Ω–∞—Ç"}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </main>
      </div>
      
      <Dialog open={openBuyDialog} onOpenChange={setOpenBuyDialog}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>–ö—É–ø—ñ–≤–ª—è –∞–∫—Ü—ñ–π</DialogTitle>
            <DialogDescription>
              –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π, —è–∫—É –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏
            </DialogDescription>
          </DialogHeader>
          {selectedOffer && (
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <p><span className="font-medium">–ü—Ä–æ–¥–∞–≤–µ—Ü—å:</span> {selectedOffer.sellerName}</p>
                <p><span className="font-medium">–î–æ—Å—Ç—É–ø–Ω–æ –∞–∫—Ü—ñ–π:</span> {selectedOffer.sharesCount}</p>
                <p><span className="font-medium">–¶—ñ–Ω–∞ –∑–∞ –∞–∫—Ü—ñ—é:</span> {selectedOffer.pricePerShare.toFixed(2)} –≥—Ä–Ω</p>
              </div>
              
              <div className="space-y-2">
                <label className="text-sm font-medium" htmlFor="buy-amount">
                  –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ:
                </label>
                <Input
                  id="buy-amount"
                  type="number"
                  min="1"
                  max={selectedOffer.sharesCount}
                  value={buyAmount}
                  onChange={(e) => setBuyAmount(e.target.value)}
                />
              </div>
              
              <div className="border-t pt-4">
                <p className="font-medium">–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</p>
                <p className="text-2xl font-bold">
                  {(parseInt(buyAmount) * selectedOffer.pricePerShare || 0).toFixed(2)} –≥—Ä–Ω
                </p>
              </div>
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setOpenBuyDialog(false)}>
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </Button>
            <Button onClick={confirmBuy}>
              –ö—É–ø–∏—Ç–∏ –∞–∫—Ü—ñ—ó
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      <Dialog open={openDetailsDialog} onOpenChange={setOpenDetailsDialog}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>–î–µ—Ç–∞–ª—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó</DialogTitle>
            <DialogDescription>
              –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —Ç–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è –∑ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º
            </DialogDescription>
          </DialogHeader>
          {selectedTransaction && (
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium">–ü—Ä–æ–¥–∞–≤–µ—Ü—å:</p>
                  <p>{selectedTransaction.sellerName}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">–ü–æ–∫—É–ø–µ—Ü—å:</p>
                  <p>{selectedTransaction.buyerName}</p>
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium">–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π:</p>
                  <p>{selectedTransaction.sharesCount}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">–¶—ñ–Ω–∞ –∑–∞ –∞–∫—Ü—ñ—é:</p>
                  <p>{selectedTransaction.pricePerShare.toFixed(2)} –≥—Ä–Ω</p>
                </div>
              </div>
              <div>
                <p className="text-sm font-medium">–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</p>
                <p className="text-lg font-bold">{selectedTransaction.totalAmount.toFixed(2)} –≥—Ä–Ω</p>
              </div>
              <div className="flex items-center gap-4">
                <div>
                  <p className="text-sm font-medium">–°—Ç–∞—Ç—É—Å:</p>
                  <Badge variant="secondary">{selectedTransaction.status}</Badge>
                </div>
                <div className="ml-auto flex items-center gap-2">
                  {(selectedTransaction.sellerId === currentUser.id && !selectedTransaction.sellerConfirmed ||
                    selectedTransaction.buyerId === currentUser.id && !selectedTransaction.buyerConfirmed) && 
                    selectedTransaction.status === "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è" && (
                    <Button size="sm" onClick={confirmTransaction}>
                      –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏
                    </Button>
                  )}
                  {selectedTransaction.status === "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è" && (
                    <Button size="sm" variant="destructive" onClick={cancelTransaction}>
                      –°–∫–∞—Å—É–≤–∞—Ç–∏
                    </Button>
                  )}
                </div>
              </div>
              
              <div className="border rounded-md p-3">
                <div className="flex items-center justify-between mb-2">
                  <p className="text-sm font-medium">–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</p>
                </div>
                <div className="max-h-[150px] overflow-y-auto border p-2 rounded-md bg-muted/50 mb-3">
                  {selectedTransaction.messages && selectedTransaction.messages.length > 0 ? (
                    selectedTransaction.messages.map((msg: any, i: number) => (
                      <div key={i} className="mb-2">
                        <p className="text-sm font-medium">{msg.sender}:</p>
                        <p className="text-sm">{msg.text}</p>
                        <p className="text-xs text-muted-foreground">
                          {new Date(msg.date).toLocaleString()}
                        </p>
                      </div>
                    ))
                  ) : (
                    <p className="text-sm text-muted-foreground">–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å</p>
                  )}
                </div>
                <div className="flex items-center space-x-2">
                  <Input 
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                  />
                  <Button size="sm" onClick={sendMessage}>
                    <MessageSquare className="h-4 w-4 mr-1" /> –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
                  </Button>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
      
      <Dialog open={openSellDialog} onOpenChange={setOpenSellDialog}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>–ü—Ä–æ–¥–∞–∂ –∞–∫—Ü—ñ–π</DialogTitle>
            <DialogDescription>
              –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∞–∫—Ü—ñ–π –Ω–∞ –ø—Ä–æ–¥–∞–∂
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <p><span className="font-medium">–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∞–∫—Ü—ñ–π:</span> {currentUser.shares || 0}</p>
              <p><span className="font-medium">–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞ –∑–∞ –∞–∫—Ü—ñ—é:</span> {stockPrice.toFixed(2)} –≥—Ä–Ω</p>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium" htmlFor="shares-count">
                –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ü—ñ–π –¥–ª—è –ø—Ä–æ–¥–∞–∂—É:
              </label>
              <Input
                id="shares-count"
                type="number"
                min="1"
                max={currentUser.shares || 0}
                value={sharesCount}
                onChange={(e) => setSharesCount(e.target.value)}
              />
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium" htmlFor="share-price">
                –¶—ñ–Ω–∞ –∑–∞ –æ–¥–Ω—É –∞–∫—Ü—ñ—é (–≥—Ä–Ω):
              </label>
              <Input
                id="share-price"
                type="number"
                min="1"
                value={sharePrice}
                onChange={(e) => setSharePrice(e.target.value)}
              />
            </div>
            
            <div className="border-t pt-4">
              <p className="font-medium">–°—É–º–∞—Ä–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</p>
              <p className="text-2xl font-bold">
                {(parseInt(sharesCount) * parseFloat(sharePrice) || 0).toFixed(2)} –≥—Ä–Ω
              </p>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setOpenSellDialog(false)}>
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </Button>
            <Button onClick={sellShares}>
              –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
